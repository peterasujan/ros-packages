#!/usr/bin/env python

import roslib
roslib.load_manifest('tfx')
import rospy
import tf
from optparse import OptionParser
from tfx.tb_angles import *
from tfx.tf_io import *
import sys

__version__ = '0.1'

if __name__ == '__main__':
	parser = OptionParser('%prog [options] PARENT CHILD [FILE]: save a transform to a file (tf.yaml) by default')
	
	parser.add_option('-w','--wait',action='store_true',default=False)
	parser.add_option('-a','--append',action='store_true',default=False)
	parser.add_option('--ros-format',action='store_true',default=False)
	parser.add_option('--generate-example',action='store_true',default=False,help='Generate example_tf.yaml to see file format')
	parser.add_option('-v','--version',action='store_true',default=False)

	(options,args) = parser.parse_args(args=rospy.myargv()[1:])
	
	if options.version:
		print __version__
		sys.exit(0)
	
	if options.generate_example:
		ret = dump_example()
		sys.exit(ret)
	
	rospy.init_node('save_tf',anonymous=True)
	
	from_frame = None
	to_frame = None

	if len(args) < 2:
		parser.error('Too few arguments!')
	
	from_frame = args[0]
	to_frame = args[1]
	if len(args) > 2:
		filename = args[2]
	else:
		filename = 'tf.yaml'
		print 'saving to %s...' % filename
	if options.wait:
		print 'waiting...'
		rospy.spin()
	listener = tf.TransformListener()
	tf_file_data = TfFileData()
	tf_file_data.populate_from_listener(from_frame,to_frame,use_stamp=True,listener=listener)
	
	print 'writing...'
	tf_file_data.write(filename,append=options.append,ros=options.ros_format)
	
	print "done"
